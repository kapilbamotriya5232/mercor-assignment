# Time Tracking Trial (T3)

# Business Context

Opportunities offered through Mercor are often on a remote & hourly basis. This means that we require software that allows our talent to:

1. Tell us when they are clocking in and clocking out.
2. Prove to us that they are working during the time they claimed.
3. Prove to us that they are not fraudulent actors.

This leads to the following software requirements:

1. A local application that allows active contractors to clock in and clock out.
2. Screenshots taken by the local application during shifts that are accessible via API.
3. Background information collection by the local application, such as IP and MAC addresses.

There are many software companies that solve purely this problem. [Hubstaff](https://hubstaff.com) is a well-known one, but we use [Insightful](https://www.insightful.io).

# Trial Specification

At a high-level, the goal of the trial is to build an Insightful-like product. A perfect trial would involve building a ‚Äúplug-n-play‚Äù product that works perfectly according to Insightful‚Äôs existing API contract, with which we interface.

## The API

<aside>
üí°

The Insightful API contract can be found [here](https://developers.insightful.io).

</aside>

There are a few core APIs from here you will need to have support for, with the rest being optional.

**The Employee API**

This API is responsible for employee management. This involves things like adding new Employees to our organization, naming employees, and deactivating employees. This can happen if an employee no longer needs to be active since they‚Äôre on zero projects, so costs can be cut by deactivating their account.

**The Project API**

This API is responsible for adding, updating, deleting, and generally managing projects. For example, customers on Mercor‚Äôs Team platform can create projects and then hire people into that project. This would involve adding a new project in Insightful and then updating it‚Äôs list of assigned employees. If an employee is off-boarded, this would involve updating a project to remove that employee from it. The project API also includes the ability to set limits on how much time employees can log, but you can ignore this aspect.

**The Task API**

Tasks are the object that employees log time against. We recommend just setting up a 1:1 mapping from a project to a ‚Äúdefault task‚Äù for that project, effectively nullifying it‚Äôs purpose. Tasks have their own set of assigned employees and always must belong to a project.

**The Time Tracking API**

This is the most important API. This is the API that tells us who logged time and when. This information is what we end up using to calculate payouts.

**The Screenshots API**

This API is used to query an Employee‚Äôs screenshots that were taken during their logged time. One important feature to note here is permission flags ‚Äî these flags denote whether the local application had necessary permissions to take correct screenshots at the time of capture. For instance, on macOS, if screen recording permissions are denied, the permission flag on a screenshot object would be false.

## The Frontend

The frontend aspect of the trial is far more minimal but important to get right since it is user-facing. There will be a few frontend components:

1. A basic web app is needed to allow employees to onboard. In particular, when an API call is made to add a new employee to the organization, this employee receives an email. They will need to click a button on that email which redirects them to your web app so that they can activate their account and download the local app which you have built.
2. A local app with a user interface is needed. It does not need to be complicated, employees simply need the ability to authenticate, see a list of their assigned projects/tasks, and then be able to log time against those. This basically just involves one start/stop button and a timer.

One thing to emphasize is that it is okay for your app to only work on one operating system. One of the most difficult things about building this product in production is that strong support is needed for all operating systems across all versions, which can be difficult to do with the nature of the product. We would prefer that you nail support for one operating system rather than have barebones support for multiple.

## Summarizing the Deliverable

1. An API that allows us ‚Äúplug-n-play‚Äù according to the [Insightful API contract](https://developers.insightful.io).
2. A very basic web app that allows employees to verify email and download the local software.
3. A local app that allows employees to log time, while capturing screenshots and other background information.

# Next Steps

For next steps, we recommend setting up your own Insightful instance and playing around with the product and API in postman to get a feel for how it works. 

If you have questions about the specification, please first refer to the Insightful API contract/product and see what they do, and try to do it that way.

If you are concerned about the scope of the trial, feel free to scope it down yourself and start with the most critical aspects. We leave it up to you to prioritize what should come first and what could be ‚Äúminimally useful‚Äù, but one example could be that screenshots should come last, since it‚Äôs more important to the business that employees are able to log time at all rather than having strong guarantees about what they did during that time.