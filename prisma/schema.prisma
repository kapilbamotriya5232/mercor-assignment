generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id               String         @id @db.Char(15)
  email            String         @unique
  name             String
  organizationId   String         @db.Char(15)
  accountId        String         @db.Char(15)
  authUserId       String?        @unique
  deactivated      BigInt         @default(0)
  identifier       String
  invited          BigInt
  projects         Json           @default("[]")
  sharedSettingsId String         @db.Char(15)
  teamId           String         @db.Char(15)
  type             String         @default("personal")
  createdAt        BigInt
  authUser         AuthUser?      @relation(fields: [authUserId], references: [id])
  organization     Organization   @relation(fields: [organizationId], references: [id])
  sharedSettings   SharedSettings @relation(fields: [sharedSettingsId], references: [id])
  team             Team           @relation(fields: [teamId], references: [id])
  screenshots      Screenshot[]
  windows          Window[]

  @@index([email])
  @@index([organizationId])
  @@index([teamId])
}

model Project {
  id             String       @id @db.Char(15)
  name           String
  organizationId String       @db.Char(15)
  archived       Boolean      @default(false)
  billable       Boolean      @default(true)
  creatorId      String       @db.Char(15)
  description    String?      @default("")
  employees      Json         @default("[]")
  payroll        Json?
  priorities     Json         @default("[\"low\", \"medium\", \"high\"]")
  statuses       Json         @default("[\"To do\", \"In progress\", \"Done\"]")
  teams          Json         @default("[]")
  createdAt      BigInt
  organization   Organization @relation(fields: [organizationId], references: [id])
  screenshots    Screenshot[]
  tasks          Task[]
  windows        Window[]

  @@index([organizationId])
  @@index([archived])
}

model Task {
  id             String       @id @db.Char(15)
  name           String
  projectId      String       @db.Char(15)
  billable       Boolean      @default(true)
  creatorId      String       @db.Char(15)
  description    String?      @default("")
  employees      Json         @default("[]")
  organizationId String       @db.Char(15)
  payroll        Json?
  priority       String       @default("low")
  status         String       @default("To Do")
  teams          Json         @default("[]")
  createdAt      BigInt
  deadline       BigInt?
  labels         Json         @default("[]")
  screenshots    Screenshot[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  windows        Window[]

  @@index([projectId])
  @@index([organizationId])
}

model Window {
  id                 String   @id @default(uuid())
  type               String   @default("manual")
  note               String   @default("")
  start              BigInt
  end                BigInt?
  timezoneOffset     BigInt   @default(0)
  shiftId            String   @default(uuid())
  projectId          String   @db.Char(15)
  taskId             String   @db.Char(15)
  paid               Boolean  @default(false)
  billable           Boolean  @default(true)
  overtime           Boolean  @default(false)
  billRate           Float    @default(0)
  overtimeBillRate   Float    @default(0)
  payRate            Float    @default(0)
  overtimePayRate    Float    @default(0)
  taskStatus         String?
  taskPriority       String?
  user               String
  computer           String
  domain             String   @default("")
  name               String
  hwid               String
  os                 String
  osVersion          String
  processed          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  employeeId         String   @db.Char(15)
  teamId             String   @db.Char(15)
  sharedSettingsId   String   @db.Char(15)
  organizationId     String   @db.Char(15)
  startTranslated    BigInt
  endTranslated      BigInt?
  negativeTime       BigInt   @default(0)
  deletedScreenshots Int      @default(0)
  lastHeartbeat      BigInt?
  missedScreenshots  Json?
  screenshots        Screenshot[]
  employee           Employee @relation(fields: [employeeId], references: [id])
  project            Project  @relation(fields: [projectId], references: [id])
  task               Task     @relation(fields: [taskId], references: [id])

  @@index([employeeId])
  @@index([projectId])
  @@index([taskId])
  @@index([start])
  @@index([shiftId])
}

model Screenshot {
  id                  String   @id @default(uuid())
  url                 String   @default("")
  screenshotUrl       String?
  productivity        Int      @default(1)
  osVersion           String
  employeeId          String   @db.Char(15)
  createdAt           DateTime @default(now())
  active              Boolean  @default(true)
  app                 String
  appFileName         String
  appFilePath         String
  appId               String   @default("")
  appLabelId          String   @default("")
  categoryId          String   @default("")
  categoryLabelId     String   @default("")
  computer            String
  document            String   @default("")
  domain              String   @default("")
  gateways            Json     @default("[]")
  hwid                String
  ipAddress           String?
  macAddress          String?
  link                String   @default("")
  name                String
  organizationId      String   @db.Char(15)
  os                  String
  processed           Boolean  @default(false)
  projectId           String   @db.Char(15)
  sharedSettingsId    String   @db.Char(15)
  shiftId             String   @default("")
  site                String   @default("")
  taskId              String   @db.Char(15)
  taskPriority        String?
  taskStatus          String?
  teamId              String   @db.Char(15)
  timestampTranslated BigInt
  timezoneOffset      BigInt   @default(0)
  title               String
  type                String   @default("scheduled")
  updatedAt           DateTime @updatedAt
  user                String
  windowId            String   @default(uuid())
  timestamp           BigInt
  employee            Employee @relation(fields: [employeeId], references: [id])
  project             Project  @relation(fields: [projectId], references: [id])
  task                Task     @relation(fields: [taskId], references: [id])
  window              Window   @relation(fields: [windowId], references: [id])

  @@index([employeeId])
  @@index([projectId])
  @@index([taskId])
  @@index([timestamp])
}

model Organization {
  id             String           @id @db.Char(15)
  name           String
  createdAt      BigInt
  apiTokens      ApiToken[]
  employees      Employee[]
  projects       Project[]
  sharedSettings SharedSettings[]
  tasks          Task[]
  teams          Team[]
}

model Team {
  id             String       @id @db.Char(15)
  name           String
  description    String?      @default("")
  organizationId String       @db.Char(15)
  default        Boolean      @default(false)
  createdAt      BigInt
  employees      Employee[]
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model SharedSettings {
  id             String       @id @db.Char(15)
  name           String
  type           String       @default("personal")
  settings       Json?        @default("{}")
  organizationId String       @db.Char(15)
  default        Boolean      @default(false)
  createdAt      BigInt
  employees      Employee[]
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model AuthUser {
  id               String     @id @default(cuid())
  email            String     @unique
  password         String?
  role             Role       @default(EMPLOYEE)
  isActive         Boolean    @default(false)
  isOnboarded      Boolean    @default(false)
  lastLoginAt      DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  activationToken  String?    @unique
  activationExpiry DateTime?
  resetToken       String?    @unique
  resetTokenExpiry DateTime?
  auditLogs        AuditLog[]
  employee         Employee?

  @@index([email])
}

model ApiToken {
  id             String       @id @default(cuid())
  name           String
  token          String       @unique
  lastFourChars  String
  permissions    Json
  isActive       Boolean      @default(true)
  lastUsedAt     DateTime?
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String       @db.Char(15)
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([token])
  @@index([organizationId])
}

model AuditLog {
  id         String    @id @default(cuid())
  action     String
  entityType String?
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())
  authUserId String?
  authUser   AuthUser? @relation(fields: [authUserId], references: [id])

  @@index([authUserId])
  @@index([action])
  @@index([createdAt])
}

model ActivationToken {
  id         String    @id @default(cuid())
  token      String    @unique
  employeeId String    @db.Char(15)
  email      String
  used       Boolean   @default(false)
  usedAt     DateTime?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  @@index([token])
  @@index([employeeId])
  @@index([expiresAt])
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}
