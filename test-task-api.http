### Task API Testing - Insightful Compatible
### This file tests all Task endpoints to ensure they match Insightful's API contract exactly

### Variables
@host = http://localhost:3000
@token = YOUR_JWT_TOKEN_HERE
@projectId = wiotv0ilptz9uqg
@employeeId1 = wk59h7b0cq8b1oq
@employeeId2 = w8jt496hid4shz3
@taskId = ww6sybfoyylxrap

### ===========================================
### 1. CREATE TASK - POST /api/v1/task
### ===========================================

### Test: Create task with all fields (matching Insightful contract)
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Your task name",
  "projectId": "{{projectId}}",
  "employees": ["{{employeeId1}}"],
  "description": "Your task description",
  "status": "To Do",
  "billable": true,
  "payroll": {
    "billRate": 1,
    "overtimeBillRate": 1
  }
}

### Expected Response (200):
# {
#   "id": "ww6sybfoyylxrap",
#   "status": "To Do",
#   "priority": "low",
#   "billable": true,
#   "name": "Your task name",
#   "projectId": "wiotv0ilptz9uqg",
#   "employees": ["wk59h7b0cq8b1oq"],
#   "description": "Your task description",
#   "creatorId": "wuiz-yuxbtr9aul",
#   "organizationId": "wbtmikjuiimvh3z",
#   "teams": ["wautlmuhdnndn7f"],
#   "createdAt": 1592927491659
# }

### Test: Create task with minimal required fields
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Minimal Task",
  "projectId": "{{projectId}}",
  "employees": ["{{employeeId1}}"]
}

### Expected Response (200) - Should include default values:
# - status: "To Do"
# - priority: "low"
# - billable: true

### Test: Create task with multiple employees
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Multi-employee task",
  "projectId": "{{projectId}}",
  "employees": ["{{employeeId1}}", "{{employeeId2}}"],
  "description": "Task assigned to multiple employees",
  "priority": "high",
  "status": "In progress"
}

### Test: Create task with labels
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Task with labels",
  "projectId": "{{projectId}}",
  "employees": ["{{employeeId1}}"],
  "labels": ["frontend", "urgent", "bug-fix"]
}

### Test: Validation error - missing name
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "projectId": "{{projectId}}",
  "employees": ["{{employeeId1}}"]
}

### Expected Error Response (422):
# {
#   "type": "VALIDATION_ERROR",
#   "message": "Parameters validation error!",
#   "details": [
#     {
#       "type": "required",
#       "field": "name",
#       "message": "The 'name' field is required!"
#     }
#   ]
# }

### Test: Validation error - missing projectId
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Task without project",
  "employees": ["{{employeeId1}}"]
}

### Test: Validation error - missing employees
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Task without employees",
  "projectId": "{{projectId}}"
}

### Test: Validation error - invalid projectId (not 15 characters)
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Task with invalid project ID",
  "projectId": "short_id",
  "employees": ["{{employeeId1}}"]
}

### Expected Error Response (422):
# {
#   "type": "VALIDATION_ERROR",
#   "message": "Parameters validation error!",
#   "details": [
#     {
#       "type": "stringLength",
#       "field": "projectId",
#       "message": "The 'projectId' field must be exactly 15 characters!"
#     }
#   ]
# }

### Test: Validation error - non-existent project
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Task for non-existent project",
  "projectId": "xxxxxxxxxxxxx15",
  "employees": ["{{employeeId1}}"]
}

### Test: Validation error - invalid employee ID
POST {{host}}/api/v1/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Task with invalid employee",
  "projectId": "{{projectId}}",
  "employees": ["invalid_employee"]
}

### ===========================================
### 2. GET TASK BY ID - GET /api/v1/task/:id
### ===========================================

### Test: Get task by valid ID
GET {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}

### Expected Response (200):
# {
#   "id": "w-4xfzgjiv-8jn8",
#   "status": "To Do",
#   "priority": "low",
#   "billable": true,
#   "name": "Your task name 2",
#   "projectId": "wiotv0ilptz9uqg",
#   "employees": ["wk59h7b0cq8b1oq"],
#   "description": "Your task description 2",
#   "creatorId": "wuiz-yuxbtr9aul",
#   "organizationId": "wbtmikjuiimvh3z",
#   "teams": ["wautlmuhdnndn7f"],
#   "createdAt": 1592927582955
# }

### Test: Validation error - ID too short
GET {{host}}/api/v1/task/shortid
Authorization: Bearer {{token}}

### Expected Error Response (422):
# {
#   "type": "VALIDATION_ERROR",
#   "message": "Parameters validation error!",
#   "details": [
#     {
#       "type": "stringLength",
#       "expected": 15,
#       "actual": 7,
#       "field": "id",
#       "message": "The 'id' field length must be 15 characters long!"
#     }
#   ]
# }

### Test: Not found error - non-existent task
GET {{host}}/api/v1/task/xxxxxxxxxxxxx15
Authorization: Bearer {{token}}

### Expected Error Response (404):
# {
#   "type": "EntityNotFound",
#   "message": "Task doesn't exist."
# }

### ===========================================
### 3. LIST ALL TASKS - GET /api/v1/task
### ===========================================

### Test: List all tasks
GET {{host}}/api/v1/task
Authorization: Bearer {{token}}

### Expected Response (200) - Array of tasks

### Test: List tasks filtered by project
GET {{host}}/api/v1/task?projectId={{projectId}}
Authorization: Bearer {{token}}

### Test: Unauthorized - no token
GET {{host}}/api/v1/task

### Expected Error Response (401):
# { "error": "Unauthorized" }

### ===========================================
### 4. UPDATE TASK - PUT /api/v1/task/:id
### ===========================================

### Test: Update task name and employees
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Your task new name",
  "employees": ["{{employeeId1}}"]
}

### Expected Response (200):
# {
#   "id": "ww6sybfoyylxrap",
#   "status": "To Do",
#   "priority": "low",
#   "billable": true,
#   "name": "Your task new name",
#   "projectId": "wiotv0ilptz9uqg",
#   "employees": ["wk59h7b0cq8b1oq"],
#   "description": "Your task description",
#   "creatorId": "wuiz-yuxbtr9aul",
#   "organizationId": "wbtmikjuiimvh3z",
#   "teams": ["wautlmuhdnndn7f"],
#   "createdAt": 1592927491659
# }

### Test: Update task - change status
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "status": "In progress"
}

### Test: Update task - change priority
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "priority": "high"
}

### Test: Update task - change billable status
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "billable": false
}

### Test: Update task - add labels
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "labels": ["backend", "api", "enhancement"]
}

### Test: Update task - change payroll rates
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "payroll": {
    "billRate": 50,
    "overtimeBillRate": 75
  }
}

### Test: Update task - add deadline
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "deadline": 1692927491659
}

### Test: Not found error - update non-existent task
PUT {{host}}/api/v1/task/xxxxxxxxxxxxx15
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "This will fail"
}

### Expected Error Response (404):
# {
#   "type": "EntityNotFound",
#   "message": "Task doesn't exist."
# }

### Test: Validation error - invalid employee
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "employees": ["invalid_employee_id"]
}

### Test: Validation error - invalid status (not in project statuses)
PUT {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "status": "Invalid Status"
}

### ===========================================
### 5. DELETE TASK - DELETE /api/v1/task/:id
### ===========================================

### Test: Delete task
DELETE {{host}}/api/v1/task/{{taskId}}
Authorization: Bearer {{token}}

### Expected Response (200) - Returns deleted task object:
# {
#   "id": "w-4xfzgjiv-8jn8",
#   "status": "To Do",
#   "priority": "low",
#   "billable": true,
#   "name": "Your task name 2",
#   "projectId": "wiotv0ilptz9uqg",
#   "employees": ["wk59h7b0cq8b1oq"],
#   "description": "Your task description 2",
#   "creatorId": "wuiz-yuxbtr9aul",
#   "organizationId": "wbtmikjuiimvh3z",
#   "teams": ["wautlmuhdnndn7f"],
#   "createdAt": 1592927582955
# }

### Test: Not found error - delete non-existent task
DELETE {{host}}/api/v1/task/xxxxxxxxxxxxx15
Authorization: Bearer {{token}}

### Expected Error Response (404):
# {
#   "type": "EntityNotFound",
#   "message": "Task doesn't exist."
# }

### Test: Validation error - invalid ID format
DELETE {{host}}/api/v1/task/short
Authorization: Bearer {{token}}

### Expected Error Response (422):
# {
#   "type": "VALIDATION_ERROR",
#   "message": "Parameters validation error!",
#   "details": [
#     {
#       "type": "stringLength",
#       "expected": 15,
#       "actual": 5,
#       "field": "id",
#       "message": "The 'id' field length must be 15 characters long!"
#     }
#   ]
# }

### ===========================================
### NOTES ON INSIGHTFUL COMPATIBILITY:
### ===========================================
# 1. Endpoint path is singular: /api/v1/task (NOT /tasks)
# 2. Tasks MUST belong to a project (projectId is required)
# 3. Task IDs must be exactly 15 characters
# 4. Required fields: name, projectId, employees[]
# 5. Default status: "To Do"
# 6. Default priority: "low"
# 7. Default billable: true
# 8. Payroll uses "overtimeBillRate" with uppercase 'R' (different from projects!)
# 9. Teams array is inherited from project and task employees
# 10. Status must match project's available statuses
# 11. Priority must match project's available priorities
# 12. Delete returns the deleted task object (not just success)
# 13. Tasks can have labels array for categorization
# 14. Assignment recommendation: 1:1 mapping from project to "default task"